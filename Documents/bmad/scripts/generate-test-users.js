const fs = require('fs');
const path = require('path');

// Generate test email addresses for customers
function generateTestUsers() {
  try {
    // Load customers data
    const customersPath = path.join(process.cwd(), 'data', 'customers.json');
    const customersData = JSON.parse(fs.readFileSync(customersPath, 'utf8'));

    if (!Array.isArray(customersData)) {
      throw new Error('Invalid customers data format');
    }

    console.log(`Generating test emails for ${customersData.length} customers...`);

    // Generate customer users
    const customerUsers = [];
    let userIdCounter = 1;

    customersData.forEach((customer, index) => {
      // Generate primary email based on customer name
      const cleanName = customer.name
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, '') // Remove special characters
        .replace(/\s+/g, '-') // Replace spaces with dashes
        .substring(0, 20); // Limit length

      const primaryEmail = `${cleanName}@test.hr`;
      
      // Add primary user
      customerUsers.push({
        id: userIdCounter++,
        customer_id: customer.id,
        email: primaryEmail,
        full_name: `${customer.name} - Glavni kontakt`,
        is_primary: true,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });

      // For some customers, add additional email addresses (simulate multiple users per contract)
      if (index % 5 === 0) { // Every 5th customer gets additional emails
        customerUsers.push({
          id: userIdCounter++,
          customer_id: customer.id,
          email: `nabava-${cleanName}@test.hr`,
          full_name: `${customer.name} - Nabava`,
          is_primary: false,
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });
      }

      if (index % 10 === 0) { // Every 10th customer gets director email
        customerUsers.push({
          id: userIdCounter++,
          customer_id: customer.id,
          email: `direktor-${cleanName}@test.hr`,
          full_name: `${customer.name} - Direktor`,
          is_primary: false,
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });
      }
    });

    // Save to JSON file for reference
    const outputPath = path.join(process.cwd(), 'data', 'test-customer-users.json');
    const output = {
      success: true,
      generated_at: new Date().toISOString(),
      total_users: customerUsers.length,
      data: customerUsers
    };

    fs.writeFileSync(outputPath, JSON.stringify(output, null, 2));
    console.log(`‚úÖ Generated ${customerUsers.length} test user emails`);

    // Generate SQL insert statements
    const sqlPath = path.join(process.cwd(), 'supabase', 'seed-customer-users.sql');
    const sqlStatements = [];

    sqlStatements.push('-- Insert test customer users');
    sqlStatements.push('-- Generated by generate-test-users.js');
    sqlStatements.push('');

    // Split into chunks to avoid too large INSERT statements
    const chunkSize = 100;
    for (let i = 0; i < customerUsers.length; i += chunkSize) {
      const chunk = customerUsers.slice(i, i + chunkSize);
      
      sqlStatements.push('INSERT INTO public.customer_users (customer_id, email, full_name, is_primary, is_active) VALUES');
      
      const values = chunk.map(user => 
        `  ('${user.customer_id}', '${user.email}', '${user.full_name.replace(/'/g, "''")}', ${user.is_primary}, ${user.is_active})`
      );
      
      sqlStatements.push(values.join(',\n'));
      sqlStatements.push('ON CONFLICT (email) DO NOTHING;');
      sqlStatements.push('');
    }

    fs.writeFileSync(sqlPath, sqlStatements.join('\n'));
    console.log(`‚úÖ Generated SQL seed file: ${sqlPath}`);

    // Generate sample login credentials file
    const sampleLogins = customerUsers
      .filter((user, index) => index < 20) // First 20 users
      .map(user => ({
        email: user.email,
        customer: user.customer_id,
        name: user.full_name,
        is_primary: user.is_primary,
        password: 'test123' // Default password for all test accounts
      }));

    const loginPath = path.join(process.cwd(), 'data', 'sample-logins.json');
    fs.writeFileSync(loginPath, JSON.stringify({
      info: 'Sample login credentials for testing',
      default_password: 'test123',
      accounts: sampleLogins
    }, null, 2));

    console.log(`‚úÖ Generated sample login credentials: ${loginPath}`);
    console.log('\nüìß Sample emails generated:');
    sampleLogins.slice(0, 5).forEach(login => {
      console.log(`   ${login.email} ‚Üí Customer: ${login.customer}`);
    });
    console.log(`   ... and ${sampleLogins.length - 5} more`);

    return {
      success: true,
      total_users: customerUsers.length,
      primary_contacts: customerUsers.filter(u => u.is_primary).length,
      additional_users: customerUsers.filter(u => !u.is_primary).length
    };

  } catch (error) {
    console.error('‚ùå Error generating test users:', error.message);
    return { success: false, error: error.message };
  }
}

// Run the script
if (require.main === module) {
  const result = generateTestUsers();
  
  if (result.success) {
    console.log('\nüéâ Test user generation completed successfully!');
    console.log(`   Primary contacts: ${result.primary_contacts}`);
    console.log(`   Additional users: ${result.additional_users}`);
    console.log(`   Total users: ${result.total_users}`);
  } else {
    console.error('\n‚ùå Failed to generate test users');
    process.exit(1);
  }
}

module.exports = { generateTestUsers };