const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config({ path: '.env.local' });

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function setupCustomerUsers() {
  try {
    console.log('üîß Setting up customer_users in cloud Supabase...\n');

    // Step 1: Check current table structure
    console.log('1Ô∏è‚É£ Checking customer_users table structure...');
    const { data: existingUsers, error: checkError } = await supabase
      .from('customer_users')
      .select('*')
      .limit(1);

    if (checkError) {
      console.log('‚ùå Table access error:', checkError.message);
      console.log('üîß Need to create customer_users table first...\n');

      // Create the table
      console.log('Creating customer_users table...');
      const createTableSQL = `
        create table if not exists public.customer_users (
          id bigint generated by default as identity primary key,
          customer_id text not null references public.customers(id) on delete cascade,
          email text not null unique,
          full_name text,
          is_primary boolean default false,
          is_active boolean default true,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null,
          updated_at timestamp with time zone default timezone('utc'::text, now()) not null
        );
      `;

      // We can't run raw SQL easily, so let's create a simpler approach
      console.log('‚ö†Ô∏è  Table needs to be created manually in Supabase dashboard');
      console.log('üìù SQL to run in Supabase SQL Editor:');
      console.log('='.repeat(60));
      console.log(createTableSQL);
      console.log('='.repeat(60));
      
      return { success: false, needsTableCreation: true };
    }

    console.log('‚úÖ customer_users table exists');

    // Step 2: Load test user data
    console.log('\n2Ô∏è‚É£ Loading test user data...');
    const testUsersPath = path.join(process.cwd(), 'data', 'test-customer-users.json');
    
    if (!fs.existsSync(testUsersPath)) {
      console.log('‚ùå Test users file not found. Run generate-test-users.js first');
      return { success: false, error: 'Test users file missing' };
    }

    const testUsersData = JSON.parse(fs.readFileSync(testUsersPath, 'utf8'));
    const testUsers = testUsersData.data || [];
    console.log(`üìß Found ${testUsers.length} test users to insert`);

    // Step 3: Clear existing test data (optional)
    console.log('\n3Ô∏è‚É£ Clearing existing customer_users...');
    const { error: deleteError } = await supabase
      .from('customer_users')
      .delete()
      .neq('id', 0); // Delete all

    if (deleteError) {
      console.log('‚ö†Ô∏è  Could not clear existing data:', deleteError.message);
    } else {
      console.log('‚úÖ Cleared existing customer_users');
    }

    // Step 4: Insert test users in batches
    console.log('\n4Ô∏è‚É£ Inserting test users...');
    const batchSize = 50;
    let totalInserted = 0;

    for (let i = 0; i < testUsers.length; i += batchSize) {
      const batch = testUsers.slice(i, i + batchSize);
      
      // Prepare batch data
      const batchData = batch.map(user => ({
        customer_id: user.customer_id,
        email: user.email,
        full_name: user.full_name,
        is_primary: user.is_primary,
        is_active: user.is_active
      }));

      const { data: insertedUsers, error: insertError } = await supabase
        .from('customer_users')
        .insert(batchData)
        .select();

      if (insertError) {
        console.log(`‚ùå Batch ${Math.floor(i/batchSize) + 1} failed:`, insertError.message);
        break;
      } else {
        totalInserted += insertedUsers.length;
        console.log(`‚úÖ Batch ${Math.floor(i/batchSize) + 1}: ${insertedUsers.length} users inserted`);
      }
    }

    console.log(`\nüìä Total inserted: ${totalInserted} users`);

    // Step 5: Verify insertion
    console.log('\n5Ô∏è‚É£ Verifying data...');
    const { data: verifyUsers, error: verifyError, count } = await supabase
      .from('customer_users')
      .select('*', { count: 'exact', head: true });

    if (verifyError) {
      console.log('‚ùå Verification failed:', verifyError.message);
    } else {
      console.log(`‚úÖ Verified: ${count} users in customer_users table`);
    }

    // Step 6: Show sample data
    console.log('\n6Ô∏è‚É£ Sample customer_users data:');
    const { data: sampleUsers, error: sampleError } = await supabase
      .from('customer_users')
      .select(`
        id,
        customer_id,
        email,
        full_name,
        is_primary,
        customers (customer_name)
      `)
      .limit(5);

    if (!sampleError && sampleUsers) {
      sampleUsers.forEach(user => {
        console.log(`   üìß ${user.email} ‚Üí ${user.customers.customer_name} ${user.is_primary ? '(PRIMARY)' : ''}`);
      });
    }

    return {
      success: true,
      totalUsers: count,
      inserted: totalInserted
    };

  } catch (error) {
    console.error('üí• Setup failed:', error.message);
    return { success: false, error: error.message };
  }
}

// Run the setup
if (require.main === module) {
  setupCustomerUsers()
    .then(result => {
      console.log('\n' + '='.repeat(50));
      if (result.success) {
        console.log('üéâ Customer-users setup completed!');
        console.log(`üë• Total users: ${result.totalUsers}`);
        console.log('üîó Ready to test login functionality');
      } else if (result.needsTableCreation) {
        console.log('üìù Please create the table manually first');
      } else {
        console.log('‚ùå Setup failed');
        process.exit(1);
      }
    })
    .catch(err => {
      console.error('üí• Script error:', err);
      process.exit(1);
    });
}

module.exports = { setupCustomerUsers };