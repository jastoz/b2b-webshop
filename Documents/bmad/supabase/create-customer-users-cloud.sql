-- Create customer_users table for managing email addresses per customer/contract
-- Run this in Supabase SQL Editor: https://supabase.com/dashboard/project/qjtkvvmvbbisrdbsxmuk/sql

-- 1. Create the table
create table if not exists public.customer_users (
  id bigint generated by default as identity primary key,
  customer_id text not null references public.customers(id) on delete cascade,
  email text not null unique,
  full_name text,
  is_primary boolean default false,
  is_active boolean default true,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- 2. Add indexes for performance
create index if not exists customer_users_customer_id_idx on public.customer_users(customer_id);
create index if not exists customer_users_email_idx on public.customer_users(email);
create index if not exists customer_users_is_active_idx on public.customer_users(is_active);

-- 3. Add constraint: Only one primary user per customer
create unique index if not exists customer_users_primary_unique_idx 
  on public.customer_users(customer_id) 
  where is_primary = true and is_active = true;

-- 4. Add updated_at trigger (if moddatetime extension exists)
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = timezone('utc'::text, now());
    return new;
end;
$$ language plpgsql;

drop trigger if exists update_customer_users_updated_at on public.customer_users;
create trigger update_customer_users_updated_at
    before update on public.customer_users
    for each row
    execute function update_updated_at_column();

-- 5. Enable RLS
alter table public.customer_users enable row level security;

-- 6. Add RLS policies
drop policy if exists "Users can view own customer users" on public.customer_users;
create policy "Users can view own customer users" on public.customer_users
  for select using (
    customer_id in (
      select customer_id from public.customer_users 
      where email = auth.jwt() ->> 'email'
    )
  );

drop policy if exists "Service role can manage all customer users" on public.customer_users;
create policy "Service role can manage all customer users" on public.customer_users
  for all using (auth.role() = 'service_role');

-- 7. Add table and column comments
comment on table public.customer_users is 'Maps email addresses to customers - allows multiple users per customer/contract';
comment on column public.customer_users.customer_id is 'References customers.id - the contract/customer this email belongs to';
comment on column public.customer_users.email is 'User email address for authentication';
comment on column public.customer_users.is_primary is 'Primary contact for this customer (only one allowed per customer)';
comment on column public.customer_users.is_active is 'Whether this user can still login';

-- 8. Insert sample test data (first 10 users)
-- You can run this separately or comment out if you want to use the JS script
insert into public.customer_users (customer_id, email, full_name, is_primary, is_active) values
  ('21', 'hotel-medena-seget-d@test.hr', 'HOTEL MEDENA - SEGET DONJI - Glavni kontakt', true, true),
  ('21', 'nabava-hotel-medena-seget-d@test.hr', 'HOTEL MEDENA - SEGET DONJI - Nabava', false, true),
  ('21', 'direktor-hotel-medena-seget-d@test.hr', 'HOTEL MEDENA - SEGET DONJI - Direktor', false, true),
  ('29', 'djeji-vrti-ibenska-m@test.hr', 'DJEČJI VRTIĆ ŠIBENIČKA MALA ŠKOLA d.o.o. - Glavni kontakt', true, true),
  ('34', 'mano-mano-doo@test.hr', 'MANO MANO d.o.o. - Glavni kontakt', true, true),
  ('44', 'nabava-mano-mano-doo@test.hr', 'MANO MANO d.o.o. - Nabava', false, true),
  ('51', 'hotel-mala-pinia@test.hr', 'HOTEL MALA PINIA - Glavni kontakt', true, true),
  ('63', 'picerija-spalato@test.hr', 'PICERIJA SPALATO - Glavni kontakt', true, true),
  ('71', 'hotel-amarin@test.hr', 'HOTEL AMARIN - Glavni kontakt', true, true),
  ('85', 'tz-grad-rovinj@test.hr', 'TZ GRADA ROVINJ - Glavni kontakt', true, true)
on conflict (email) do nothing;

-- 9. Verify the setup
select 
  'customer_users table created' as status,
  count(*) as total_users,
  count(*) filter (where is_primary = true) as primary_contacts,
  count(*) filter (where is_primary = false) as additional_users
from public.customer_users;