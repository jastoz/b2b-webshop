-- CREATE CUSTOMER_USERS TABLE (Structure Only)
-- Copy and paste this SQL into Supabase SQL Editor
-- https://supabase.com/dashboard/project/qjtkvvmvbbisrdbsxmuk/sql

-- 1. Create the table
CREATE TABLE IF NOT EXISTS public.customer_users (
  id bigint generated by default as identity primary key,
  customer_id text not null references public.customers(id) on delete cascade,
  email text not null unique,
  full_name text,
  is_primary boolean default false,
  is_active boolean default true,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- 2. Add indexes for performance
CREATE INDEX IF NOT EXISTS customer_users_customer_id_idx ON public.customer_users(customer_id);
CREATE INDEX IF NOT EXISTS customer_users_email_idx ON public.customer_users(email);
CREATE INDEX IF NOT EXISTS customer_users_is_active_idx ON public.customer_users(is_active);

-- 3. Add constraint: Only one primary user per customer
CREATE UNIQUE INDEX IF NOT EXISTS customer_users_primary_unique_idx 
  ON public.customer_users(customer_id) 
  WHERE is_primary = true AND is_active = true;

-- 4. Enable Row Level Security
ALTER TABLE public.customer_users ENABLE ROW LEVEL SECURITY;

-- 5. Add RLS policies for security
DROP POLICY IF EXISTS "Users can view own customer users" ON public.customer_users;
CREATE POLICY "Users can view own customer users" ON public.customer_users
  FOR SELECT USING (
    customer_id IN (
      SELECT customer_id FROM public.customer_users 
      WHERE email = auth.jwt() ->> 'email'
    )
  );

DROP POLICY IF EXISTS "Service role can manage all customer users" ON public.customer_users;
CREATE POLICY "Service role can manage all customer users" ON public.customer_users
  FOR ALL USING (auth.role() = 'service_role');

-- 6. Add table comments
COMMENT ON TABLE public.customer_users IS 'Maps email addresses to customers - allows multiple users per customer/contract';
COMMENT ON COLUMN public.customer_users.customer_id IS 'References customers.id - the contract/customer this email belongs to';
COMMENT ON COLUMN public.customer_users.email IS 'User email address for authentication';
COMMENT ON COLUMN public.customer_users.is_primary IS 'Primary contact for this customer (only one allowed per customer)';
COMMENT ON COLUMN public.customer_users.is_active IS 'Whether this user can still login';

-- 7. Verify table creation
SELECT 
  'customer_users table created successfully' as status,
  COUNT(*) as current_records
FROM public.customer_users;